<?php

namespace App\Http\Controllers\Admin\Driver;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\UserDriverDetail;
use App\Models\Admin\Driver\DriverTrainingSchool;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\MediaCollections\Models\Media;
use App\Models\Admin\DocumentAttachment;

class TrainingSchoolsController extends Controller
{
    /**
     * Vista para todas las escuelas de entrenamiento
     */
    public function index(Request $request)
    {       
        $query = DriverTrainingSchool::query()
            ->with(['driver.user']);

        // Aplicar filtros
        if ($request->filled('search_term')) {
            $query->where('school_name', 'like', '%' . $request->search_term . '%')
                ->orWhere('city', 'like', '%' . $request->search_term . '%')
                ->orWhere('state', 'like', '%' . $request->search_term . '%');
        }

        if ($request->filled('driver_filter')) {
            $query->where('user_driver_detail_id', $request->driver_filter);
        }

        if ($request->filled('date_from')) {
            $query->whereDate('date_start', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('date_end', '<=', $request->date_to);
        }

        // Ordenar resultados
        $sortField = $request->get('sort_field', 'date_start');
        $sortDirection = $request->get('sort_direction', 'desc');
        $query->orderBy($sortField, $sortDirection);

        $trainingSchools = $query->paginate(10);
        $drivers = UserDriverDetail::with('user')->get();

        return view('admin.drivers.training.index', compact('trainingSchools', 'drivers'));
    }

    /**
     * Muestra el formulario para crear una nueva escuela de entrenamiento
     */
    public function create()
    {       
        $drivers = UserDriverDetail::with('user')->get();
        return view('admin.drivers.training.create', compact('drivers'));
    }

    /**
     * Almacena una nueva escuela de entrenamiento
     */
    public function store(Request $request)
    {       
        DB::beginTransaction();
        try {
            // Validar datos
            $validated = $request->validate([
                'user_driver_detail_id' => 'required|exists:user_driver_details,id',
                'date_start' => 'required|date',
                'date_end' => 'required|date|after_or_equal:date_start',
                'school_name' => 'required|string|max:255',
                'city' => 'required|string|max:100',
                'state' => 'required|string|max:100',
                'phone_number' => 'required|string|max:20',
                'training_skills' => 'nullable|array',
                'training_files' => 'nullable|string', // JSON de archivos del componente Livewire
            ]);

            // Crear el registro de escuela de entrenamiento
            $trainingSchool = new DriverTrainingSchool();
            $trainingSchool->user_driver_detail_id = $request->user_driver_detail_id;
            $trainingSchool->date_start = $request->date_start;
            $trainingSchool->date_end = $request->date_end;
            $trainingSchool->school_name = $request->school_name;
            $trainingSchool->city = $request->city;
            $trainingSchool->state = $request->state;
            $trainingSchool->phone_number = $request->phone_number;
            $trainingSchool->graduated = $request->has('graduated');
            $trainingSchool->subject_to_safety_regulations = $request->has('subject_to_safety_regulations');
            $trainingSchool->performed_safety_functions = $request->has('performed_safety_functions');
            $trainingSchool->training_skills = $request->training_skills ?? [];
            $trainingSchool->save();

            // Procesar archivos si existen
            if ($request->has('training_files')) {
                $filesData = json_decode($request->training_files, true);
                
                if (is_array($filesData)) {
                    $driverId = $trainingSchool->userDriverDetail->id;
                    $schoolId = $trainingSchool->id;
                    
                    // Crear el directorio de destino si no existe
                    $destinationDir = "public/driver/{$driverId}/training/{$schoolId}";
                    if (!Storage::exists($destinationDir)) {
                        Storage::makeDirectory($destinationDir);
                    }
                    
                    foreach ($filesData as $fileData) {
                        if (!empty($fileData['original_name']) && isset($fileData['path'])) {
                            try {
                                // Ruta del archivo temporal
                                $tempPath = isset($fileData['temp_path']) 
                                    ? $fileData['temp_path'] 
                                    : 'livewire-tmp/' . $fileData['path'];
                                
                                // Verificar que el archivo temporal existe
                                if (!Storage::exists($tempPath)) {
                                    // Intentar buscar en la carpeta temp directamente
                                    $tempPath = 'temp/' . basename($fileData['path']);
                                    
                                    if (!Storage::exists($tempPath)) {
                                        Log::error('Archivo temporal no encontrado (store)', [
                                            'temp_path' => $tempPath,
                                            'original_name' => $fileData['original_name']
                                        ]);
                                        continue;
                                    }
                                }
                                
                                $fileName = $fileData['original_name'];
                                $destinationPath = "{$destinationDir}/{$fileName}";
                                
                                // Mover el archivo de temp a la ubicación final
                                if (Storage::move($tempPath, $destinationPath)) {
                                    // Crear registro en la DB
                                    $document = new DocumentAttachment();
                                    $document->documentable_type = DriverTrainingSchool::class;
                                    $document->documentable_id = $trainingSchool->id;
                                    $document->file_path = $destinationPath;
                                    $document->file_name = $fileName;
                                    $document->original_name = $fileData['original_name'];
                                    $document->mime_type = $fileData['mime_type'] ?? 'application/octet-stream';
                                    $document->size = $fileData['size'] ?? Storage::size($destinationPath);
                                    $document->collection = 'school_certificates';
                                    $document->custom_properties = [
                                        'school_id' => $trainingSchool->id,
                                        'driver_id' => $driverId,
                                        'uploaded_at' => now()->format('Y-m-d H:i:s')
                                    ];
                                    $document->save();
                                    
                                    Log::info('Documento guardado físicamente y registrado (store)', [
                                        'id' => $document->id,
                                        'from' => $tempPath,
                                        'to' => $destinationPath
                                    ]);
                                } else {
                                    Log::error('Error al mover archivo físico (store)', [
                                        'from' => $tempPath,
                                        'to' => $destinationPath
                                    ]);
                                }
                            } catch (\Exception $e) {
                                Log::error('Error al procesar documento (store)', [
                                    'error' => $e->getMessage(),
                                    'trace' => $e->getTraceAsString(),
                                    'fileData' => $fileData
                                ]);
                            }
                        }
                    }
                }
            }
            
            DB::commit();
            return redirect()->route('admin.training-schools.index')
                ->with('success', 'Training school record created successfully.');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error al crear escuela de entrenamiento', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->withInput()
                ->with('error', 'Error creating training school record: ' . $e->getMessage());
        }
    }
    
    /**
     * Muestra el formulario para editar una escuela de entrenamiento existente
     */
    public function edit(DriverTrainingSchool $trainingSchool)
    {       
        $drivers = UserDriverDetail::with('user')->get();
        
        // Obtener los documentos asociados
        $documents = DocumentAttachment::where('documentable_type', DriverTrainingSchool::class)
            ->where('documentable_id', $trainingSchool->id)
            ->orderBy('created_at', 'desc')
            ->get();
            
        return view('admin.drivers.training.edit', compact('trainingSchool', 'drivers', 'documents'));
    }
    
    /**
     * Actualiza una escuela de entrenamiento existente
     */
    public function update(DriverTrainingSchool $trainingSchool, Request $request)
    {       
        DB::beginTransaction();
        try {
            // Validar datos
            $validated = $request->validate([
                'user_driver_detail_id' => 'required|exists:user_driver_details,id',
                'date_start' => 'required|date',
                'date_end' => 'required|date|after_or_equal:date_start',
                'school_name' => 'required|string|max:255',
                'city' => 'required|string|max:100',
                'state' => 'required|string|max:100',
                'phone_number' => 'required|string|max:20',
                'graduated' => 'boolean',
                'subject_to_safety_regulations' => 'boolean',
                'performed_safety_functions' => 'boolean',
                'training_skills' => 'nullable|array',
                'training_files' => 'nullable|string', // JSON de archivos del componente Livewire
            ]);

            // Actualizar el registro de escuela de entrenamiento
            $trainingSchool->user_driver_detail_id = $request->user_driver_detail_id;
            $trainingSchool->date_start = $request->date_start;
            $trainingSchool->date_end = $request->date_end;
            $trainingSchool->school_name = $request->school_name;
            $trainingSchool->city = $request->city;
            $trainingSchool->state = $request->state;
            $trainingSchool->phone_number = $request->phone_number;
            $trainingSchool->graduated = $request->has('graduated');
            $trainingSchool->subject_to_safety_regulations = $request->has('subject_to_safety_regulations');
            $trainingSchool->performed_safety_functions = $request->has('performed_safety_functions');
            $trainingSchool->training_skills = $request->training_skills ?? [];
            $trainingSchool->save();

            // Procesar archivos si existen
            if ($request->has('training_files')) {
                $filesData = json_decode($request->training_files, true);
                
                if (is_array($filesData)) {
                    $driverId = $trainingSchool->userDriverDetail->id;
                    $schoolId = $trainingSchool->id;
                    
                    // Crear el directorio de destino si no existe
                    $destinationDir = "public/driver/{$driverId}/training/{$schoolId}";
                    if (!Storage::exists($destinationDir)) {
                        Storage::makeDirectory($destinationDir);
                    }
                    
                    foreach ($filesData as $fileData) {
                        if (!empty($fileData['original_name']) && isset($fileData['path'])) {
                            try {
                                // Ruta del archivo temporal
                                $tempPath = isset($fileData['temp_path']) 
                                    ? $fileData['temp_path'] 
                                    : 'livewire-tmp/' . $fileData['path'];
                                
                                // Verificar que el archivo temporal existe
                                if (!Storage::exists($tempPath)) {
                                    // Intentar buscar en la carpeta temp directamente
                                    $tempPath = 'temp/' . basename($fileData['path']);
                                    
                                    if (!Storage::exists($tempPath)) {
                                        Log::error('Archivo temporal no encontrado (update)', [
                                            'temp_path' => $tempPath,
                                            'original_name' => $fileData['original_name']
                                        ]);
                                        continue;
                                    }
                                }
                                
                                $fileName = $fileData['original_name'];
                                $destinationPath = "{$destinationDir}/{$fileName}";
                                
                                // Mover el archivo de temp a la ubicación final
                                if (Storage::move($tempPath, $destinationPath)) {
                                    // Crear registro en la DB
                                    $document = new DocumentAttachment();
                                    $document->documentable_type = DriverTrainingSchool::class;
                                    $document->documentable_id = $trainingSchool->id;
                                    $document->file_path = $destinationPath;
                                    $document->file_name = $fileName;
                                    $document->original_name = $fileData['original_name'];
                                    $document->mime_type = $fileData['mime_type'] ?? 'application/octet-stream';
                                    $document->size = $fileData['size'] ?? Storage::size($destinationPath);
                                    $document->collection = 'school_certificates';
                                    $document->custom_properties = [
                                        'school_id' => $trainingSchool->id,
                                        'driver_id' => $driverId,
                                        'uploaded_at' => now()->format('Y-m-d H:i:s')
                                    ];
                                    $document->save();
                                    
                                    Log::info('Documento guardado físicamente y registrado (update)', [
                                        'id' => $document->id,
                                        'from' => $tempPath,
                                        'to' => $destinationPath
                                    ]);
                                } else {
                                    Log::error('Error al mover archivo físico (update)', [
                                        'from' => $tempPath,
                                        'to' => $destinationPath
                                    ]);
                                }
                            } catch (\Exception $e) {
                                Log::error('Error al procesar documento (update)', [
                                    'error' => $e->getMessage(),
                                    'trace' => $e->getTraceAsString(),
                                    'fileData' => $fileData
                                ]);
                            }
                        }
                    }
                }
            }
            
            DB::commit();
            return redirect()->route('admin.training-schools.index')
                ->with('success', 'Training school record updated successfully.');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Error al actualizar escuela de entrenamiento', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->back()
                ->withInput()
                ->with('error', 'Error updating training school record: ' . $e->getMessage());
        }
    }
    
    /**
     * Elimina una escuela de entrenamiento
     */
    public function destroy(DriverTrainingSchool $trainingSchool)
    {       
        try {
            // Eliminar todos los documentos asociados
            $documents = DocumentAttachment::where('documentable_type', DriverTrainingSchool::class)
                ->where('documentable_id', $trainingSchool->id)
        try {
            // Obtener todos los documentos asociados con escuelas de entrenamiento
            $query = Media::where('model_type', DriverTrainingSchool::class)
                ->with(['model' => function($q) {
                    $q->with('driver.user');
                }]);

            // Filtro por escuela
            if ($request->has('school') && !empty($request->school)) {
                $query->where('model_id', $request->school);
            }

            // Filtro por conductor
            if ($request->has('driver') && !empty($request->driver)) {
                $query->whereHas('model', function($q) use ($request) {
                    $q->where('user_driver_detail_id', $request->driver);
                });
            }

            // Filtro por tipo de archivo
            if ($request->has('file_type') && !empty($request->file_type)) {
                switch ($request->file_type) {
                    case 'image':
                        $query->where('mime_type', 'like', 'image/%');
                        break;
                    case 'pdf':
                        $query->where('mime_type', 'application/pdf');
                        break;
                    case 'doc':
                        $query->where(function($q) {
                            $q->where('mime_type', 'like', '%word%')
                              ->orWhere('mime_type', 'like', '%excel%')
                              ->orWhere('mime_type', 'like', '%sheet%')
                              ->orWhere('mime_type', 'like', '%csv%')
                              ->orWhere('mime_type', 'like', '%powerpoint%')
                              ->orWhere('mime_type', 'like', '%presentation%');
                        });
                        break;
                }
            }

            // Filtro por fecha de subida
            if ($request->has('upload_from') && !empty($request->upload_from)) {
                $query->whereDate('created_at', '>=', $request->upload_from);
            }

            if ($request->has('upload_to') && !empty($request->upload_to)) {
                $query->whereDate('created_at', '<=', $request->upload_to);
            }

            // Ordenar por fecha de creación (más recientes primero)
            $documents = $query->orderBy('created_at', 'desc')->paginate(15);
            
            // Cargar todos los conductores para el filtro
            $drivers = UserDriverDetail::with('user')->get();
            
            // Cargar todas las escuelas para el filtro
            $schools = DriverTrainingSchool::orderBy('school_name')->get();
            
            return view('admin.drivers.training.documents', compact('documents', 'drivers', 'schools'));
        } catch (\Exception $e) {
            Log::error('Error al cargar documentos de escuelas de entrenamiento', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->with('error', 'Error al cargar documentos: ' . $e->getMessage());
        }
    }
    
    /**
     * Muestra los documentos de una escuela de entrenamiento específica
     */
    public function showDocuments(DriverTrainingSchool $trainingSchool)
    {       
        $documents = DocumentAttachment::where('documentable_type', DriverTrainingSchool::class)
            ->where('documentable_id', $trainingSchool->id)
            ->orderBy('created_at', 'desc')
            ->get();
            
        return view('admin.drivers.training.show_documents', compact('trainingSchool', 'documents'));
    }
    
    /**
     * Muestra o descarga un documento
     */
    public function previewDocument($documentId)
    {       
        try {
            $document = DocumentAttachment::findOrFail($documentId);
            
            // Verificar que el documento sea de una escuela de entrenamiento
            if ($document->documentable_type !== DriverTrainingSchool::class) {
                return redirect()->back()->with('error', 'El documento no pertenece a una escuela de entrenamiento');
            }
            
            // Verificar que el archivo exista
            if (!Storage::exists($document->file_path)) {
                return redirect()->back()->with('error', 'El archivo físico no existe');
            }
            
            $filePath = Storage::path($document->file_path);
            $mimeType = $document->mime_type;
            
            // Determinar si mostrar en el navegador o descargar
            if (strpos($mimeType, 'image/') === 0 || $mimeType === 'application/pdf') {
                // Visualizar en el navegador
                return response()->file($filePath, [
                    'Content-Type' => $mimeType,
                    'Content-Disposition' => 'inline; filename="' . $document->file_name . '"'
                ]);
            } else {
                // Descargar el archivo
                return response()->download($filePath, $document->original_name, [
                    'Content-Type' => $mimeType
                ]);
            }
        } catch (\Exception $e) {
            Log::error('Error al previsualizar documento', [
                'document_id' => $documentId,
                'error' => $e->getMessage()
            ]);
            return redirect()->back()->with('error', 'Error al previsualizar documento: ' . $e->getMessage());
        }
    }
    
    /**
     * Elimina un documento mediante AJAX
     */
    public function ajaxDestroyDocument(Request $request)
    {       
        try {
            $request->validate([
                'document_id' => 'required|numeric|exists:document_attachments,id'
            ]);
            
            $document = DocumentAttachment::findOrFail($request->document_id);
            
            // Verificar que el documento sea de una escuela de entrenamiento
            if ($document->documentable_type !== DriverTrainingSchool::class) {
                return response()->json(['success' => false, 'message' => 'El documento no pertenece a una escuela de entrenamiento'], 400);
            }
            
            // Eliminar físicamente el archivo si existe
            if (Storage::exists($document->file_path)) {
                Storage::delete($document->file_path);
            }
            
            // Eliminar el registro de la base de datos
            $document->delete();
            
            return response()->json(['success' => true, 'message' => 'Documento eliminado correctamente']);
        } catch (\Exception $e) {
            Log::error('Error al eliminar documento mediante AJAX', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json(['success' => false, 'message' => 'Error: ' . $e->getMessage()], 500);
        }
    }
    
    /**
     * Elimina un documento
     */
    public function destroyDocument($documentId)
    {       
        try {
            // Buscar el documento en la tabla document_attachments
            $document = DocumentAttachment::findOrFail($documentId);
            
            // Obtener información del documento antes de eliminarlo
            $fileName = $document->original_name ?? $document->file_name;
            
            // Verificar que pertenece a una escuela de entrenamiento (tipo de modelo correcto)
            if ($document->documentable_type !== DriverTrainingSchool::class) {
                return redirect()->back()->with('error', 'El documento no pertenece a una escuela de entrenamiento');
            }
            
            $schoolId = $document->documentable_id;
            $trainingSchool = DriverTrainingSchool::find($schoolId);
            
            if (!$trainingSchool) {
                return redirect()->route('admin.training-schools.index')
                    ->with('error', 'No se encontró la escuela de entrenamiento asociada al documento');
            }
            
            // Eliminar físicamente el archivo si existe
            if (Storage::exists($document->file_path)) {
                Storage::delete($document->file_path);
            }
            
            // Eliminar registro de la base de datos
            $document->delete();
            
            return redirect()->route('admin.training-schools.edit', $schoolId)
                ->with('success', "Documento '{$fileName}' eliminado correctamente");
                
        } catch (\Exception $e) {
            Log::error('Error al eliminar documento', [
                'document_id' => $documentId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->with('error', 'Error al eliminar documento: ' . $e->getMessage());
        }
    }
    
    /**
     * Subir documentos para una escuela de entrenamiento específica
     */
    public function storeDocuments(DriverTrainingSchool $trainingSchool, Request $request)
    {       
        try {
            $request->validate([
                'documents' => 'required|array',
                'documents.*' => 'file|max:10240|mimes:jpg,jpeg,png,pdf,doc,docx'
            ]);

            $uploadedCount = 0;
            $driverId = $trainingSchool->userDriverDetail->id;
            $schoolId = $trainingSchool->id;
            
            // Crear el directorio de destino si no existe
            $destinationDir = "public/driver/{$driverId}/training/{$schoolId}";
            if (!Storage::exists($destinationDir)) {
                Storage::makeDirectory($destinationDir);
            }

            foreach ($request->file('documents') as $file) {
                $originalName = $file->getClientOriginalName();
                $extension = $file->getClientOriginalExtension();
                $fileName = pathinfo($originalName, PATHINFO_FILENAME);
                $fileName = preg_replace('/[^a-zA-Z0-9_-]/', '_', $fileName); // Sanitizar
                $finalFileName = $fileName . '.' . $extension;
                
                // Si ya existe un archivo con ese nombre, añadir un timestamp
                if (Storage::exists("{$destinationDir}/{$finalFileName}")) {
                    $finalFileName = time() . '_' . $finalFileName;
                }
                
                // Guardar el archivo
                $path = $file->storeAs($destinationDir, $finalFileName);
                
                // Crear registro en la DB
                $document = new DocumentAttachment();
                $document->documentable_type = DriverTrainingSchool::class;
                $document->documentable_id = $trainingSchool->id;
                $document->file_path = $path;
                $document->file_name = $finalFileName;
                $document->original_name = $originalName;
                $document->mime_type = $file->getMimeType();
                $document->size = $file->getSize();
                $document->collection = 'school_certificates';
                $document->custom_properties = [
                    'school_id' => $trainingSchool->id,
                    'driver_id' => $driverId,
                    'uploaded_at' => now()->format('Y-m-d H:i:s')
                ];
                $document->save();
                
                $uploadedCount++;

                Log::info('Documento de escuela de entrenamiento subido correctamente', [
                    'school_id' => $trainingSchool->id,
                    'document_id' => $document->id,
                    'file_name' => $document->file_name
                ]);
            }

            return redirect()->back()->with('success', "{$uploadedCount} documentos subidos correctamente");
        } catch (\Exception $e) {
            Log::error('Error al subir documentos de escuela de entrenamiento', [
                'school_id' => $trainingSchool->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return redirect()->back()->with('error', 'Error al subir documentos: ' . $e->getMessage());
        }
    }
}
